<?php

namespace MVC\Util;

/**
 * Webpack
 *
 * Using webpack server for things like hot module loading from an internal http://localhost:3000.
 *
 * When loading on a real environment we do not use hot module swapping.
 *
 * This allow switching the source of the js and css files generated by webpack
 * based on the current environment.
 *
 * @author  Mat Lipe
 * @since   2.3.0
 *
 * @package  MVC\Util
 *
 * @example (new \MVC\Util\Webpack( get_stylesheet_directory_uri() . '/resources/react') )->init();
 *
 */
class Webpack {
	private $directory;

	private $handle;

	/**
	 * force_node_server
	 *
	 * Set to true to skip the check and use the node server always
	 *
	 * @static
	 * @var bool
	 */
	private static $force_node_server = false;


	public function __construct( $directory, $handle = 'mvc-react-webpack' ){
		$this->directory = $directory;
		$this->handle    = $handle;
	}


	public function init(){
		$this->hooks();
	}


	/**
	 * If you want to skip the check for node server and just use
	 * it send this true
	 *
	 * Will speed up page loading by about 1 second but
	 * the page will break if you have not run 'npm start'.
	 *
	 * If you are working with other developers who may not
	 * truly understand usage or value of hot swapping, it
	 * is best to leave this on.
	 *
	 * @param bool $force (defaults to false)
	 *
	 * @return void
	 */
	public static function set_force_node_server( $force ){
		self::$force_node_server = $force;
	}


	private function hooks(){
		if( !did_action( 'wp_enqueue_scripts' ) ){
			add_action( 'wp_enqueue_scripts', array( $this, 'register' ) );
		} else {
			$this->register();
		}
	}


	public function register(){
		$use_node = self::$force_node_server;
		if( defined( 'SCRIPT_DEBUG' ) && SCRIPT_DEBUG == true ){
			if( !$use_node ){
				$node_service = @fsockopen( 'localhost', 3000, $no, $str, 2 );
				if( false != $node_service ){
					$use_node = true;
				}
			}
		}
		if( !$use_node ){
			$js_file  = trailingslashit( $this->directory ) . 'dist/master.js';
			$css_file = trailingslashit( $this->directory ) . 'dist/master.css';
		} else {
			$js_file = 'http://localhost:3000/dist/master.js';
		}

		wp_enqueue_script( $this->handle, $js_file, array(), mvc_util()->get_beanstalk_based_version(), true );

		if( !empty( $css_file ) ){
			wp_enqueue_style( $this->handle . '-css', $css_file, array(), mvc_util()->get_beanstalk_based_version() );
		}

	}
}